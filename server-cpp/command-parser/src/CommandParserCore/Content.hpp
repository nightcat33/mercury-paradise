// 
// Content.hpp
//
// This file implements logic of Content generated by command
//
#ifndef Content_hpp
#define Content_hpp

#include <unordered_map>
#include <Poco/JSON/Parser.h>
#include <Poco/Dynamic/Var.h>
#include <nlohmann/json.hpp>
#include "Cache/RedisClient.hpp"
namespace CommandParserCore {
namespace Content {


typedef std::string PageID;

class Page {
public:
    static const PageID HOME;
    
};

enum class BrokerType {
    TEST,
    DEBUG,
    PRODUCTION
};

class BrokerStateTracker {
public:
    // position
    BrokerStateTracker();

    //set currentPage to page
    BrokerStateTracker(PageID page);
    PageID getCurrentPosition() const;
    void setCurrentPosition(PageID page);
private:    
    PageID currentPage;
};

class Broker {
public:
    /* function to generate reply to the client */
    virtual ~Broker() {} 
    
    
    typedef nlohmann::json (Broker::*CommandHandler)(void);
    virtual std::string reply(std::string command);

private:

    // parser for the command
    void parseCommand(std::string command);
    // command representations
    std::string commandAction;
    std::vector<std::string> commandArgs;
    
    // Handlers for the commands
    // https://plutohell.atlassian.net/wiki/spaces/CD
    nlohmann::json LSHandler();
    nlohmann::json CDHandler();
    nlohmann::json HOMEHandler();
    nlohmann::json POSTHandler();
    nlohmann::json COMMENTHandler();
    nlohmann::json NEXTHandler();
    nlohmann::json PREVHandler();
    nlohmann::json TYPEHandler();
    nlohmann::json OPENHandler();
    nlohmann::json CLOSEHandler();

    std::unordered_map<std::string, Broker::CommandHandler> command_handler_map = {
            {std::string("ls"), &Broker::LSHandler},
            {std::string("cd"), &Broker::CDHandler},
            {std::string("home"), &Broker::HOMEHandler},
            {std::string("post"), &Broker::POSTHandler},
            {std::string("comment"), &Broker::COMMENTHandler},
            {std::string("next"), &Broker::NEXTHandler},
            {std::string("prev"), &Broker::PREVHandler},
            {std::string("type"), &Broker::TYPEHandler},
            {std::string("open"), &Broker::OPENHandler},
            {std::string("close"), &Broker::CLOSEHandler}

        };


protected:
    //cache client
    std::unique_ptr<CommandParserCore::Cache::RedisClient> cache_client; 
    void init();

// functions accessable by the child class
    // tracker
    BrokerStateTracker tracker;

// functions needed to be initialized by child class

    // returns a json object representing all available directory
    // TODO: maybe it is more efficient to return just an array
    virtual nlohmann::json getAllAvailableDirectory() = 0;
    
    // return a json object representing the page 
    virtual nlohmann::json getContentFromPage(const PageID page) = 0;
    // return a json object representing the current page 
    virtual nlohmann::json getContentFromCurrentPage() = 0;
};


class BrokerFactory {
public:
    
    // BrokerFactory(BrokerType type);

    /* function to generate a new instance of broker */
    std::unique_ptr<Broker> newInstance(BrokerType type);
};


} } // namespace CommandParserCore::Content

# endif // Content_hpp
